
let mapleader =  ',' " map the leader key to comma
"set path+=**

" Indentaion Options
filetype indent on " enable indentation rules that are file-type specific
set autoindent " new lines inherit the indentation of previous lines
set smartindent
set cindent
set expandtab " convert tabs are spaces
set shiftround " when shifting lines, round the indentation to the nearest multiple of 'shiftwidth'
set shiftwidth=4 " when shifting, indent using four spaces
set tabstop=4 " number of visual spaces per TAB
set softtabstop=4
set smarttab " insert 'tabstop' number of spaces when the 'tab' key is pressed

" Search Options
set hlsearch " enable search highlighting
set ignorecase " ignore case when searching
set incsearch " incremental search that shows partial matches
set smartcase " automatically switch search to case-sensitive when search query containes an uppercase letter

" Performance Options
set complete-=i " limit the files searched for auto-completes
set lazyredraw " don't update screen during macro and script execution

" Text Rendering Options
set encoding=UTF-8
set display+=lastline " always try to show a paragraph's last line
set linebreak " avoid wrapping a line in the middle of a word
set scrolloff=1 " the number of screen lines to keep above and below the cursor
set sidescrolloff=5 " the number of screen columns to keep to the left and right of the cursor
syntax enable " enable sytanx highlighting
set wrap " enable line wrapping
set clipboard=unnamed " to copy and paste from clipboard
set clipboard=unnamedplus

" User Interface Options
set laststatus=2 " always display the status bar
set ruler " always show cursor position
set wildmenu " display command line's tab complete options as a menu
set tabpagemax=50 " maximum number of tab pages that can be opened from the command line
set cursorline " highlight current line
"set cursorcolumn " highlight current column
set number " show line numbers
set relativenumber " show line number on the current line and relative numbers on all other lines
set noerrorbells " disable beep on errors
set visualbell " flash the screen instead of beeping on errors
set mouse=a " enable mouse for scrolling and resizing
set title " set the windows's title, reflecting the file currently being edited
set showcmd " show command in bottom bar
set shiftwidth=4 " number of spaces to use for autoindent
set backspace=2 " fix backspace behavior on most terminals


" Code Folding Options
set foldmethod=indent " fold based on indentation levels
set foldnestmax=3 " only fold up to three nested levels
set nofoldenable " disable fodling by default
set foldcolumn=1

" Miscellaneous Options
set autoread " automatically re-read files if unmodified inside Vim
set backspace=indent,eol,start " allow backspacing over indentation, line breaks and insertion start

set backupdir=~/.cache/vim " directory to store backup files
set confirm " display a confirmation dialog when closing an unsaved file
set dir=~/.cache/vim/swaps/ " directory to store swap files
set formatoptions+=j " delete comment characters when joining lines
set history=1000 " increase the undo limit
set nomodeline " ignore file's mode lines and use vimrc configurations instead
set spell " enable spellchecking
set timeout timeoutlen=500 ttimeoutlen=100
set autowrite
"set termguicolors

set splitbelow
set splitright

" Manage plugins with vim-plug
call plug#begin()
Plug 'tomasiser/vim-code-dark'
Plug 'luochen1990/rainbow'
Plug 'yggdroot/indentline'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mattn/emmet-vim'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-endwise'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/syntastic'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdcommenter'
Plug 'christoomey/vim-tmux-navigator'

Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'thaerkh/vim-workspace'
Plug 'sheerun/vim-polyglot'
Plug 'valloric/matchtagalways'

Plug 'leafOfTree/vim-vue-plugin'
Plug 'ryanoasis/vim-devicons'
call plug#end()
colorscheme codedark " change color scheme

" emmet plugin configs
let g:user_emmet_leader_key='<Tab>'


let g:fzf_colors =
        \ { 'fg':      ['fg', 'Normal'],
\ 'bg':      ['bg', 'Normal'],
\ 'hl':      ['fg', 'Comment'],
\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
\ 'hl+':     ['fg', 'Statement'],
\ 'border':  ['fg', 'Ignore'],
\ 'prompt':  ['fg', 'Conditional'],
\ 'pointer': ['fg', 'Exception'],
\ 'marker':  ['fg', 'Keyword'],
\ 'spinner': ['fg', 'Label'],
\ 'header':  ['fg', 'Comment'] }

let g:fzf_history_dir = '~/.local/share/fzf-history'

let g:fzf_layout = { 'down': '~40%' }
"
" configurations of vim-vue-plugin
let g:vim_vue_plugin_load_full_syntax = 1
" configurations of indentline plugin
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" rainbow configurations section
let g:rainbow_active = 1
let g:rainbow_conf = {
\  'separately': {
\   'nerdtree': 0,
\}
\}

" configurations of airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

" configuration of NERDTree
let g:NERDTreeWinSize = 25
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeIgnore = ['^node_modules$']
"au bufEnter * if @% == 'NERD_tree_1' | execute 'normal R' | endif
if exists('g:loaded_webdevicons')
call webdevicons#refresh()
endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('vue', 'green', 'none', '#8FAA54', '#31B53E')

" Custom mappings
nmap <silent> <leader>w :w<cr>
map  <silent> <leader><leader> <esc>
map! <silent> <leader><leader> <esc>
vmap <silent> <leader><leader> <esc>
nmap <silent> <leader>R :source $MYVIMRC<cr>
nmap <silent> <leader>q :q<cr>
nmap <silent> <leader>V :e $MYVIMRC<cr>
nnoremap <silent> <leader>z :e $MYZSHRC<cr>

execute "set <A-g>=\eg"
execute "set <A-f>=\ef"
execute "set <A-d>=\ed"
execute "set <A-w>=\ew"
execute "set <A-j>=\ej"
execute "set <A-k>=\ek"
execute "set <A-h>=\eh"
execute "set <A-l>=\el"
nmap <silent> <A-g> :NERDTreeToggle<cr>
vmap  <plug>NERDCommenterToggle
nmap  <plug>NERDCommenterToggle
nmap <silent> <A-f> :bn<cr>
nmap <silent> <A-d> :bp<cr>
nmap <silent> <A-w> :bd<cr>
let g:tmux_navigator_no_mappings = 1
nmap <silent> <A-j> :TmuxNavigateDown<cr>
nmap <silent> <A-k> :TmuxNavigateUp<cr>
nmap <silent> <A-h> :TmuxNavigateLeft<cr>
nmap <silent> <A-l> :TmuxNavigateRight<cr>

" with cursor blinking
if has("autocmd")
  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[1 q"' | redraw!
  au InsertEnter,InsertChange *
    \ if v:insertmode == 'i' |
    \   silent execute '!echo -ne "\e[5 q"' | redraw! |
    \ elseif v:insertmode == 'r' |
    \   silent execute '!echo -ne "\e[3 q"' | redraw! |
    \ endif
  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
endif
" paste settings
let &t_SI = "\<Esc>\<Esc>[?2004h"
"let &t_SR = "\<Esc>\<Esc>[4 q"
let &t_EI = "\<Esc>\<Esc>[?2004l"
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

nnoremap n nzz
nnoremap N Nzz
inoremap <leader>zz <C-o>zz


nnoremap <c-s-down> :m .+1<CR>==
nnoremap <c-s-up> :m .-2<CR>==
inoremap <c-s-down> <Esc>:m .+1<CR>==gi
inoremap <c-s-up> <Esc>:m .-2<CR>==gi
vnoremap <c-s-down> :m '>+1<CR>gv=gv
vnoremap <c-s-up> :m '<-2<CR>gv=gv

" tmux issues of moving lines mappings
if &term =~'^screen'
    "tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xup>=\e[1;*A"
    execute "set <xdown>=\e[1;*B"
endif

augroup toggle_relative_number
    autocmd InsertEnter * setlocal norelativenumber
    autocmd InsertLeave * setlocal relativenumber
augroup end

nmap <silent> <leader>h :nohlsearch<cr>
" highlight trailing whitespaces
match ErrorMsg '\s\+$'
" remove trailing whitespaces automatically
autocmd BufWritePre * %s/\s\+$//e
" go to end of line and start of line inside insert mode
inoremap <leader>e <c-o>A
inoremap <leader>s <c-o>I
" insert new line above and below quickly
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>
inoremap <leader>o <c-o>o
inoremap <leader>O <c-o>O

" configurations of fzf and Rg
nnoremap <silent> <leader>S :Files<cr>
nnoremap <silent> <leader>G :Rg<cr>
inoremap <silent> <expr> <leader>p fzf#vim#complete#path('rg --files')
nnoremap <silent> <leader>f :NERDTreeFind<cr>

nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
noremap <C-a> ggVG

" key for opening any file in chrome and specifically for .md files
nnoremap <leader>` :!google-chrome %:p<cr><cr>
if has('persistent_undo')      "check if your vim version supports it
set undofile                 "turn on the feature
set undodir=$HOME/.vim/undo  "directory where the undo files will be stored
endif  "

" configurations for vim-workspace plugin
nnoremap <leader>t :ToggleWorkspace<CR>
let g:workspace_create_new_tabs = 0
let g:workspace_autosave_untrailspaces = 0

" color column and toggle relative number
nnoremap <leader>CC :execute "set colorcolumn=" . (&colorcolumn == "" ? "100" : "")<CR>
nnoremap <leader>ll :set invrelativenumber<cr>

nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

autocmd BufNewFile,BufRead *.strings   set syntax=swift
